{
	"info": {
		"_postman_id": "a61ed05a-ec01-4976-b7b8-f198d9451e4f",
		"name": "CDR Energy Sector Conformance Tests",
		"description": "# CDR Energy Conformance Tests\n\nThis collection contains a series of conformance tests for the Consumer Data Right standards applicable to the designation for the Banking sector in Australia.\n\nThese tests do not constitute a full functional test of an implementation compliant with CDR standards. It is the obligation of data holders and data recipients to functionally test their implementations fully using whatever mechanism they choose.\n\nThese tests do contain comprehensive coverage of the requirements of the standards. A data holder implementation that is able to pass all of the tests in this collection could be reasonably described as conformant to the CDR standards for the Banking sector.\n\n# Conformance Scope\n\nThis collection complies with v1.31.0 of the CDR standards.\n\nIt includes support for the following API end points:\n\n### Energy APIs\n\n- Get Generic Plans\n    \n- Get Generic Plan Detail\n    \n- Get Service Point Detail\n    \n- Get Usage For Service Point\n    \n- Get DER For Service Point\n    \n- Get Bulk Usage\n    \n- Get Usage For Specific Service Points\n    \n- Get Account Detail\n    \n- Get Agreed Payment Schedule\n    \n- Get Concessions\n    \n- Get Balance For Account\n    \n- Get Invoices For Account\n    \n- Get Billing For Account\n    \n- Get Bulk Balances\n    \n- Get Balances For Specific Accounts\n    \n- Get Bulk Invoices\n    \n- Get Invoices For Specific Account\n    \n- Get Accounts\n    \n\n# Scope Exclusions\n\nThis collections does not cover:\n\n- CDR API end points not listed above\n    \n- Negative scenarios that are not specifically addressed in the standards for individual end points\n    \n- Non-functional requirements\n    \n- Information Security Profile and associated end points\n    \n- MA-SSL configuration\n    \n\n# Change Log\n\n| Change Date | Change Description |\n| --- | --- |\n| 1st June 2022 | Initial creation of the collection |\n| 17-Aug-2024 | Update to v1.31.0 |\n\n# Contact Support:\n\n{\n\nName : Consumer Data Standards\n\nEmail : [dev@consumerdatastandards.gov.au](https://mailto:dev@consumerdatastandards.gov.au)\n\n}",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8286723"
	},
	"item": [
		{
			"name": "Unauthenticated",
			"item": [
				{
					"name": "Get Generic Plans v1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Parse the response body\r",
									"var jsonData;\r",
									"try {\r",
									"    jsonData = pm.response.json();\r",
									"\r",
									"    }\r",
									"catch(e) {\r",
									"    console.log(e);\r",
									"}\r",
									"\r",
									"// HTTP Response and headers\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// only products with specified planType are included\r",
									"if ((pm.response.code === 200 ) && (pm.request.url.query.get(\"fuelType\") != null) && (jsonData?.data?.products?.length > 0)) {\r",
									"    pm.test('Plan type query parameter is considered', function() {\r",
									"        var fuelType = pm.variables.get(\"fuelType\")       \r",
									"            jsonData?.data?.plans.forEach(p => {\r",
									"                if (fuelType != \"ALL\"){\r",
									"                    pm.expect(p.type).to.equal(fuelType)\r",
									"                }\r",
									"                \r",
									"            })\r",
									"    });\r",
									"}\r",
									" \r",
									"\r",
									"// only products with specified fuelType are included\r",
									"if ((pm.response.code === 200 ) && (pm.request.url.query.get(\"type\") != null) && (jsonData?.data?.products?.length > 0)) {\r",
									"    pm.test('Plan type query parameter is considered', function() {\r",
									"        var planType = pm.variables.get(\"type\")       \r",
									"            jsonData?.data?.plans.forEach(p => {\r",
									"                if (planType != \"ALL\"){\r",
									"                    pm.expect(p.type).to.equal(planType)\r",
									"                }\r",
									"                \r",
									"            })\r",
									"    });\r",
									"}\r",
									" \r",
									"// Schema payload check\r",
									" ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
									"    const valid = ajv.validate(\"EnergyPlanListResponse\", jsonData)\r",
									"    if (!valid){\r",
									"    ajv.errors.forEach(element => {\r",
									"        console.log(JSON.stringify(element));\r",
									"        });\r",
									"    };\r",
									"    pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
									"});   \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "1",
								"type": "text"
							},
							{
								"key": "x-min-v",
								"value": "1",
								"type": "text"
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{primaryDataHolderUrl}}/energy/plans?type={{planType}}&fuelType={{fuelType}}&effective={{effective}}",
							"host": [
								"{{primaryDataHolderUrl}}"
							],
							"path": [
								"energy",
								"plans"
							],
							"query": [
								{
									"key": "type",
									"value": "{{planType}}"
								},
								{
									"key": "fuelType",
									"value": "{{fuelType}}"
								},
								{
									"key": "effective",
									"value": "{{effective}}"
								}
							]
						},
						"description": "Obtain a list of energy plans that are currently offered to the market.\n\nNote that the results returned by this end point are expected to be ordered in descending order according to `lastUpdated`."
					},
					"response": [
						{
							"name": "Get Generic Plans",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"value": "1",
										"type": "text"
									},
									{
										"key": "x-min-v",
										"value": "1",
										"type": "text"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "Excepteur tem",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "http://localhost:8383/cds-au/v1/energy/plans?type=ALL&fuelType=ALL&effective=CURRENT&updated-since={{updatedSinceDate}}&page=1&page-size=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8383",
									"path": [
										"cds-au",
										"v1",
										"energy",
										"plans"
									],
									"query": [
										{
											"key": "type",
											"value": "ALL",
											"description": "Used to filter results on the type field.  Any one of the valid values for this field can be supplied plus 'ALL'.  If absent defaults to 'ALL'"
										},
										{
											"key": "fuelType",
											"value": "ALL",
											"description": "Used to filter results on the fuelType field.  Any one of the valid values for this field can be supplied plus 'ALL'.  If absent defaults to 'ALL'"
										},
										{
											"key": "effective",
											"value": "CURRENT",
											"description": "Allows for the filtering of plans based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields. Valid values are ‘CURRENT’, ‘FUTURE’ and ‘ALL’. If absent defaults to 'CURRENT'"
										},
										{
											"key": "updated-since",
											"value": "{{updatedSinceDate}}",
											"description": "Only include plans that have been updated after the specified date and time.  If absent defaults to include all plans"
										},
										{
											"key": "brand",
											"value": "Excepteur tem",
											"description": "Used to filter results on the brand field.  If absent defaults to include all plans",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"description": "Page of results to request (standard pagination)"
										},
										{
											"key": "page-size",
											"value": "2",
											"description": "Page size to request.  Default is 25 (standard pagination)Size}}"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 31 May 2022 03:51:42 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=d9f35cf995ba845b"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=c95cbbf2cb3e9e43"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "119"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1653969162"
								},
								{
									"key": "ETag",
									"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"tomas\": {\n        \"name\": \"mockRequestNotFoundError\",\n        \"vv\": \"To mock this request add an example response for the mock server to return.\",\n        \"header\": \"You need addde\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get Generic Plan Detail v1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"        // Parse the response body",
									"        var jsonData;",
									"        try {",
									"            jsonData = pm.response.json();",
									"",
									"            }",
									"        catch(e) {",
									"            console.log(e);",
									"        }",
									"",
									"",
									"// Schema payload check",
									" ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {",
									"            const valid = ajv.validate(\"EnergyPlanResponse\", jsonData)",
									"            if (!valid){",
									"            ajv.errors.forEach(element => {",
									"                console.log(JSON.stringify(element));",
									"                });",
									"            };",
									"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true; ",
									"        });    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "1",
								"type": "text"
							},
							{
								"key": "x-min-v",
								"value": "1",
								"type": "text"
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{primaryDataHolderUrl}}/energy/plans/:planId",
							"host": [
								"{{primaryDataHolderUrl}}"
							],
							"path": [
								"energy",
								"plans",
								":planId"
							],
							"variable": [
								{
									"key": "planId",
									"value": "{{planId}}"
								}
							]
						},
						"description": "Obtain detailed information on a single energy plan offered openly to the market"
					},
					"response": []
				},
				{
					"name": "Get Generic Plan Detail v2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"        // Parse the response body",
									"        var jsonData;",
									"        try {",
									"            jsonData = pm.response.json();",
									"",
									"            }",
									"        catch(e) {",
									"            console.log(e);",
									"        }",
									"",
									"",
									"// Schema payload check",
									" ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {",
									"            const valid = ajv.validate(\"EnergyPlanResponseV2\", jsonData)",
									"            if (!valid){",
									"            ajv.errors.forEach(element => {",
									"                console.log(JSON.stringify(element));",
									"                });",
									"            };",
									"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true; ",
									"        });    ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "2",
								"type": "text"
							},
							{
								"key": "x-min-v",
								"value": "2",
								"type": "text"
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{primaryDataHolderUrl}}/energy/plans/:planId",
							"host": [
								"{{primaryDataHolderUrl}}"
							],
							"path": [
								"energy",
								"plans",
								":planId"
							],
							"variable": [
								{
									"key": "planId",
									"value": "{{planId}}"
								}
							]
						},
						"description": "Obtain detailed information on a single energy plan offered openly to the market"
					},
					"response": []
				},
				{
					"name": "Get Generic Plan Detail v3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"        // Parse the response body",
									"        var jsonData;",
									"        try {",
									"            jsonData = pm.response.json();",
									"",
									"            }",
									"        catch(e) {",
									"            console.log(e);",
									"        }",
									"",
									"",
									"// Schema payload check",
									" ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {",
									"            const valid = ajv.validate(\"EnergyPlanResponseV3\", jsonData)",
									"            if (!valid){",
									"            ajv.errors.forEach(element => {",
									"                console.log(JSON.stringify(element));",
									"                });",
									"            };",
									"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true; ",
									"        });    ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "3",
								"type": "text"
							},
							{
								"key": "x-min-v",
								"value": "3",
								"type": "text"
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{primaryDataHolderUrl}}/energy/plans/:planId",
							"host": [
								"{{primaryDataHolderUrl}}"
							],
							"path": [
								"energy",
								"plans",
								":planId"
							],
							"variable": [
								{
									"key": "planId",
									"value": "{{planId}}"
								}
							]
						},
						"description": "Obtain detailed information on a single energy plan offered openly to the market"
					},
					"response": []
				}
			]
		},
		{
			"name": "Secondary Dataholder",
			"item": [
				{
					"name": "electricity/servicepoints",
					"item": [
						{
							"name": "{service Point Id}",
							"item": [
								{
									"name": "T.EAR.0075 Get Service Point Detail v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body",
													"        var jsonData;",
													"        try {",
													"            jsonData = pm.response.json();",
													"",
													"            }",
													"        catch(e) {",
													"            console.log(e);",
													"        }",
													"",
													"        // Schema payload check",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {",
													"            const valid = ajv.validate(\"EnergyServicePointDetailResponse\", jsonData)",
													"            if (!valid){",
													"            ajv.errors.forEach(element => {",
													"                console.log(JSON.stringify(element));",
													"                });",
													"            };",
													"           // pm.expect(valid).to.be.true; ",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;",
													"        });    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');\r",
													"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";\r",
													"var fapiDate = moment().format(dateFormat);\r",
													"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{secondaryDataHolderUrl}}/energy/electricity/servicepoints/:servicePointId",
											"host": [
												"{{secondaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"electricity",
												"servicepoints",
												":servicePointId"
											],
											"variable": [
												{
													"key": "servicePointId",
													"value": "{{servicePointId}}",
													"description": "(Required) ID of the specific service point requested.  This is a tokenised ID previous obtained from the Service Point List Data end point.  Note that it is not a nationalMeteringId."
												}
											]
										},
										"description": "Obtain a list of service points owned by the customer that has authorised the current session.\n\nSee [DSB documentation](https://consumerdatastandardsaustralia.github.io/standards-testing/v1.0.1/#testcase-t.ear.006) for additional information."
									},
									"response": []
								},
								{
									"name": "T.EAR.0077 Get Usage For Service Point v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyUsageListResponse\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');\r",
													"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";\r",
													"var fapiDate = moment().format(dateFormat);\r",
													"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{secondaryDataHolderUrl}}/energy/electricity/servicepoints/:servicePointId/usage?page=1&page-size={{pageSize}}",
											"host": [
												"{{secondaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"electricity",
												"servicepoints",
												":servicePointId",
												"usage"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request.  Default is 25 (standard pagination)"
												}
											],
											"variable": [
												{
													"key": "servicePointId",
													"value": "{{servicePointId}}",
													"description": "(Required) ID of the specific service point requested.  This is a tokenised ID previous obtained from the Service Point List Data end point.  Note that it is not a nationalMeteringId."
												}
											]
										},
										"description": "Obtain a list of electricity usage data from a particular service point.\n\nSee [DSB documentation](https://consumerdatastandardsaustralia.github.io/standards-testing/v1.0.1/#testcase-t.ear.012) for additional information."
									},
									"response": []
								},
								{
									"name": "T.EAR.0083 Get DER For Service Point v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyDerDetailResponse\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{secondaryDataHolderUrl}}/energy/electricity/servicepoints/:servicePointId/der",
											"host": [
												"{{secondaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"electricity",
												"servicepoints",
												":servicePointId",
												"der"
											],
											"variable": [
												{
													"key": "servicePointId",
													"value": "{{servicePointId}}",
													"description": "(Required) ID of the specific service point requested.  This is a tokenised ID previous obtained from the Service Point List Data end point.  Note that it is not a nationalMeteringId."
												}
											]
										},
										"description": "Obtain a list of DER data from a particular service point\n\nSee [DSB documentation](https://consumerdatastandardsaustralia.github.io/standards-testing/v1.0.1/#testcase-t.ear.033) for additional information."
									},
									"response": []
								}
							]
						},
						{
							"name": "usage",
							"item": [
								{
									"name": "T.EAR.0046 Get Bulk Usage v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyUsageListResponse\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');\r",
													"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";\r",
													"var fapiDate = moment().format(dateFormat);\r",
													"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{secondaryDataHolderUrl}}/energy/electricity/servicepoints/usage?page=1&page-size={{pageSize}}",
											"host": [
												"{{secondaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"electricity",
												"servicepoints",
												"usage"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request.  Default is 25 (standard pagination)"
												}
											]
										},
										"description": "Obtain usage data for all service points associated with the customer.\n\nSee [DSB documentation](https://consumerdatastandardsaustralia.github.io/standards-testing/v1.0.1/#testcase-t.ear.045) for additional information."
									},
									"response": []
								},
								{
									"name": "T.EAR.0020 Get Usage For Specific Service Points v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyUsageListResponse\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');\r",
													"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";\r",
													"var fapiDate = moment().format(dateFormat);\r",
													"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"servicePointIds\": [\n            \"{{servicePointId}}\"\n        ]\n    },\n    \"meta\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{secondaryDataHolderUrl}}/energy/electricity/servicepoints/usage?page=1&page-size={{pageSize}}",
											"host": [
												"{{secondaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"electricity",
												"servicepoints",
												"usage"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request.  Default is 25 (standard pagination)"
												}
											]
										},
										"description": "Obtain the electricity usage data for a specific set of service points.\n\nSee [DSB documentation](https://consumerdatastandardsaustralia.github.io/standards-testing/v1.0.1/#testcase-t.ear.023) for additional information."
									},
									"response": []
								}
							]
						},
						{
							"name": "der",
							"item": [
								{
									"name": "T.EAR.061 Get Bulk DER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"        // HTTP Response and headers\r",
													"        pm.test(\"Status code is 200\", function () {\r",
													"            pm.response.to.have.status(200);\r",
													"        });\r",
													"\r",
													"\r",
													"        // Schema payload check\r",
													"        pm.test('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyDerListResponse\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid).to.be.true; \r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{secondaryDataHolderUrl}}/energy/electricity/servicepoints/der?page=1&page-size={{pageSize}}",
											"host": [
												"{{secondaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"electricity",
												"servicepoints",
												"der"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request.  Default is 25 (standard pagination)"
												}
											]
										},
										"description": "Obtain DER data for all service points associated with the customer\n\nSee [DSB documentation](https://consumerdatastandardsaustralia.github.io/standards-testing/v1.0.1/#testcase-t.ear.061) for additional information."
									},
									"response": []
								},
								{
									"name": "T.EAR.039 Get DER For Specific Service Points",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"        // HTTP Response and headers\r",
													"        pm.test(\"Status code is 200\", function () {\r",
													"            pm.response.to.have.status(200);\r",
													"        });\r",
													"\r",
													"\r",
													"        // Schema payload check\r",
													"        pm.test('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyDerListResponse\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid).to.be.true; \r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"servicePointIds\": [\n            \"{{servicePointId}}\"\n        ]\n    },\n    \"meta\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{secondaryDataHolderUrl}}/energy/electricity/servicepoints/der?page=1&page-size={{pageSize}}",
											"host": [
												"{{secondaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"electricity",
												"servicepoints",
												"der"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request.  Default is 25 (standard pagination)"
												}
											]
										},
										"description": "Obtain DER data for a specific set of service points\n\nSee [DSB documentation](https://consumerdatastandardsaustralia.github.io/standards-testing/v1.0.1/#testcase-t.ear.039) for additional information."
									},
									"response": []
								}
							]
						},
						{
							"name": "T.EAR.0109 Get Service Points  invalid version value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"        // Parse the response body",
											"        var jsonData;",
											"        try {",
											"            jsonData = pm.response.json();",
											"",
											"            }",
											"        catch(e) {",
											"            console.log(e);",
											"        }",
											"",
											"        ",
											"        ",
											"        var requestVersion = pm.request.headers.get(\"x-v\");",
											"        var requestVersionNumber = Number(pm.request.headers.get(\"x-v\"));",
											"        var requestXvIsValidInteger = Number.isSafeInteger(requestVersionNumber) && requestVersionNumber >= 0 && requestVersionNumber < 1001;",
											"",
											"",
											"        ((requestVersion != null && (requestXvIsValidInteger == false)) ? pm.test : pm.test.skip)(\"A.ZAA.0007: Validate version - invalid version value [x-v]\", function () {",
											"            pm.response.to.have.status(400);",
											"            const valid = ajv.validate(\"ErrorListResponse\", jsonData)",
											"            if (!valid){",
											"            ajv.errors.forEach(element => {",
											"                console.log(JSON.stringify(element));",
											"                });",
											"            };",
											"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;",
											"            pm.expect(jsonData.errors?.code, JSON.stringify(ajv.errors)).equals(\"urn:au-cds:error:cds-all:Field/Invalid\")       ",
											"",
											"        });",
											"",
											"        var requestXFapi = pm.request.headers.get(\"x-fapi-interaction-id\");",
											"        ((requestXFapi != null) ? pm.test : pm.test.skip)(\"A.ZAA.0013: Validate FAPI Interaction ID - included in request\", function () {",
											"            var responseXFapi = pm.response.headers.get(\"x-fapi-interaction-id\");",
											"            pm.expect(responseXFapi).equals(requestXFapi);",
											"        });",
											"",
											"        ((requestXFapi == null) ? pm.test : pm.test.skip)(\"A.ZAA.0014: Validate FAPI Interaction ID - not in request\", function () {",
											"            var responseXFapi = pm.response.headers.get(\"x-fapi-interaction-id\");",
											"            pm.expect(responseXFapi).not.null;",
											"        });",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";\r",
											"var fapiDate = moment().format(dateFormat);\r",
											"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-min-v",
										"value": "1"
									},
									{
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}"
									},
									{
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}"
									},
									{
										"key": "x-cds-client-headers",
										"value": "{{cdsClientHeader}}"
									},
									{
										"key": "x-v",
										"value": "2"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									}
								],
								"url": {
									"raw": "{{secondaryDataHolderUrl}}/energy/electricity/servicepoints",
									"host": [
										"{{secondaryDataHolderUrl}}"
									],
									"path": [
										"energy",
										"electricity",
										"servicepoints"
									]
								},
								"description": "Obtain a list of service points owned by the customer that has authorised the current session\n\nRefer to [DSB documentation](https://consumerdatastandardsaustralia.github.io/standards-testing/v1.0.1/#testcase-t.ear.001)"
							},
							"response": []
						},
						{
							"name": "T.EAR.0002: ADR call to DH: Get Service Points - with pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"        // Parse the response body\r",
											"        var jsonData;\r",
											"        try {\r",
											"            jsonData = pm.response.json();\r",
											"\r",
											"            }\r",
											"        catch(e) {\r",
											"            console.log(e);\r",
											"        }\r",
											"\r",
											"        // HTTP Response and headers\r",
											"        pm.test(\"Status code is 200\", function () {\r",
											"            pm.response.to.have.status(200);\r",
											"        });\r",
											"\r",
											"        // Schema payload check\r",
											"        ((pm.response.code == 200) ? pm.test : pm.test.skip), pm.test('A.EAR.0004 Response payload conforms to standards schema', function() {\r",
											"            const valid = ajv.validate(\"EnergyServicePointListResponse\", jsonData)\r",
											"            if (!valid){\r",
											"            ajv.errors.forEach(element => {\r",
											"                console.log(JSON.stringify(element));\r",
											"                });\r",
											"            };\r",
											"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
											"        });    \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";\r",
											"var fapiDate = moment().format(dateFormat);\r",
											"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"value": "1",
										"type": "text"
									},
									{
										"key": "x-min-v",
										"value": "1",
										"type": "text"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text"
									},
									{
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}",
										"type": "text"
									},
									{
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}",
										"type": "text"
									},
									{
										"key": "x-cds-client-headers",
										"value": "{{cdsClientHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{secondaryDataHolderUrl}}/energy/electricity/servicepoints?page=1&page-size={{pageSize}}",
									"host": [
										"{{secondaryDataHolderUrl}}"
									],
									"path": [
										"energy",
										"electricity",
										"servicepoints"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "page-size",
											"value": "{{pageSize}}"
										}
									]
								},
								"description": "Obtain a list of service points owned by the customer that has authorised the current session"
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var moment = require('moment');",
							"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";",
							"var fapiDate = moment().format(dateFormat);",
							"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Primary Dataholder",
			"item": [
				{
					"name": "accounts",
					"item": [
						{
							"name": "{account Id}",
							"item": [
								{
									"name": "Get Account Detail v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyAccountDetailResponse\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{primaryDataHolderUrl}}/energy/accounts/:accountId",
											"host": [
												"{{primaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"accounts",
												":accountId"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "{{accountId}}",
													"description": "(Required) ID of a specific account to obtain data for.  This is a tokenised ID previous obtained from the Account List end point."
												}
											]
										},
										"description": "Obtain detailed information for a specific energy account"
									},
									"response": []
								},
								{
									"name": "Get Account Detail v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyAccountDetailResponseV2\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "2",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "2",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{primaryDataHolderUrl}}/energy/accounts/:accountId",
											"host": [
												"{{primaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"accounts",
												":accountId"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "{{accountId}}",
													"description": "(Required) ID of a specific account to obtain data for.  This is a tokenised ID previous obtained from the Account List end point."
												}
											]
										},
										"description": "Obtain detailed information for a specific energy account"
									},
									"response": []
								},
								{
									"name": "Get Account Detail v3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyAccountDetailResponseV3\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "3",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "3",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{primaryDataHolderUrl}}/energy/accounts/:accountId",
											"host": [
												"{{primaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"accounts",
												":accountId"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "{{accountId}}",
													"description": "(Required) ID of a specific account to obtain data for.  This is a tokenised ID previous obtained from the Account List end point."
												}
											]
										},
										"description": "Obtain detailed information for a specific energy account"
									},
									"response": []
								},
								{
									"name": "Get Account Detail v4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyAccountDetailResponseV4\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
													"        });    \r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "4",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "3",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{primaryDataHolderUrl}}/energy/accounts/:accountId",
											"host": [
												"{{primaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"accounts",
												":accountId"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "{{accountId}}",
													"description": "(Required) ID of a specific account to obtain data for.  This is a tokenised ID previous obtained from the Account List end point."
												}
											]
										},
										"description": "Obtain detailed information for a specific energy account"
									},
									"response": []
								},
								{
									"name": "Get Agreed Payment Schedule v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyPaymentScheduleResponse\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{primaryDataHolderUrl}}/energy/accounts/:accountId/payment-schedule",
											"host": [
												"{{primaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"accounts",
												":accountId",
												"payment-schedule"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "{{accountId}}",
													"description": "(Required) ID of a specific account to obtain data for.  This is a tokenised ID previous obtained from the Account List end point."
												}
											]
										},
										"description": "Obtain the agreed payment schedule and details, if any, for a specific energy account"
									},
									"response": []
								},
								{
									"name": "Get Concessions v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyConcessionsResponse\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;; \r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');\r",
													"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";\r",
													"var fapiDate = moment().format(dateFormat);\r",
													"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{primaryDataHolderUrl}}/energy/accounts/:accountId/concessions",
											"host": [
												"{{primaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"accounts",
												":accountId",
												"concessions"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "{{accountId}}",
													"description": "(Required) ID of a specific account to obtain data for.  This is a tokenised ID previous obtained from the Account List end point."
												}
											]
										},
										"description": "Obtain the details of any concessions or hardship arrangements applied to a specific energy account"
									},
									"response": []
								},
								{
									"name": "Get Balance For Account v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyBalanceResponse\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');\r",
													"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";\r",
													"var fapiDate = moment().format(dateFormat);\r",
													"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{primaryDataHolderUrl}}/energy/accounts/:accountId/balance",
											"host": [
												"{{primaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"accounts",
												":accountId",
												"balance"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "{{accountId}}",
													"description": "(Required) ID of a specific account to obtain data for.  This is a tokenised ID previous obtained from the Account List end point."
												}
											]
										},
										"description": "Obtain the current balance for a specific account"
									},
									"response": []
								},
								{
									"name": "Get Invoices For Account v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyInvoiceListResponse\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true; \r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');\r",
													"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";\r",
													"var fapiDate = moment().format(dateFormat);\r",
													"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"description": "(Required) Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable."
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls."
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
											}
										],
										"url": {
											"raw": "{{primaryDataHolderUrl}}/energy/accounts/:accountId/invoices",
											"host": [
												"{{primaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"accounts",
												":accountId",
												"invoices"
											],
											"variable": [
												{
													"key": "accountId",
													"value": "{{accountId}}",
													"description": "(Required) ID of a specific account to obtain data for.  This is a tokenised ID previous obtained from the Account List end point."
												}
											]
										},
										"description": "Obtain the invoices for a specific account"
									},
									"response": []
								},
								{
									"name": "Get Billing For Account v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyBillingListResponseV2\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');\r",
													"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";\r",
													"var fapiDate = moment().format(dateFormat);\r",
													"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{primaryDataHolderUrl}}/energy/accounts/:accountId/billing?newest-time={{timeCurrent}}&oldest-time={{dateLastYear}}&page=1&page-size={{pageSize}}",
											"host": [
												"{{primaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"accounts",
												":accountId",
												"billing"
											],
											"query": [
												{
													"key": "newest-time",
													"value": "{{timeCurrent}}",
													"description": "Constrain the request to records with effective time at or before this date/time.  If absent defaults to current date/time.  Format is aligned to DateTimeString common type"
												},
												{
													"key": "oldest-time",
													"value": "{{dateLastYear}}",
													"description": "Constrain the request to records with effective time at or after this date/time. If absent defaults to newest-time minus 12 months.  Format is aligned to DateTimeString common type"
												},
												{
													"key": "page",
													"value": "1",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request.  Default is 25 (standard pagination)"
												}
											],
											"variable": [
												{
													"key": "accountId",
													"value": "{{accountId}}",
													"description": "(Required) ID of a specific account to obtain data for.  This is a tokenised ID previous obtained from the Account List end point."
												}
											]
										},
										"description": "Obtain the billing transactions for a specific account"
									},
									"response": []
								}
							]
						},
						{
							"name": "balances",
							"item": [
								{
									"name": "Get Bulk Balances v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyBalanceListResponse\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');\r",
													"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";\r",
													"var fapiDate = moment().format(dateFormat);\r",
													"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{primaryDataHolderUrl}}/energy/accounts/balances?page=1&page-size={{pageSize}}",
											"host": [
												"{{primaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"accounts",
												"balances"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request.  Default is 25 (standard pagination)"
												}
											]
										},
										"description": "Obtain the current balance for all accounts"
									},
									"response": []
								},
								{
									"name": "Get Balances For Specific Accounts v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyBalanceListResponse\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');\r",
													"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";\r",
													"var fapiDate = moment().format(dateFormat);\r",
													"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"accountIds\": [\n            \"{{accountId}}\",\n            \"{{accountId2}}\"\n        ]\n    },\n    \"meta\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{primaryDataHolderUrl}}/energy/accounts/balances?page=1&page-size={{pageSize}}",
											"host": [
												"{{primaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"accounts",
												"balances"
											],
											"query": [
												{
													"key": "page",
													"value": "1",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request.  Default is 25 (standard pagination)"
												}
											]
										},
										"description": "Obtain the current balance for a specified set of accounts"
									},
									"response": []
								}
							]
						},
						{
							"name": "invoices",
							"item": [
								{
									"name": "Get Bulk Invoices v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyInvoiceListResponse\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');\r",
													"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";\r",
													"var fapiDate = moment().format(dateFormat);\r",
													"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{primaryDataHolderUrl}}/energy/accounts/invoices?newest-date={{timeCurrent}}&oldest-date={{dateLastYear}}&page=1&page-size={{pageSize}}",
											"host": [
												"{{primaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"accounts",
												"invoices"
											],
											"query": [
												{
													"key": "newest-date",
													"value": "{{timeCurrent}}",
													"description": "Constrain the request to records with effective date at or before this date.  If absent defaults to current date.  Format is aligned to DateString common type"
												},
												{
													"key": "oldest-date",
													"value": "{{dateLastYear}}",
													"description": "Constrain the request to records with effective date at or after this date. If absent defaults to newest-date minus 24 months days.  Format is aligned to DateString common type"
												},
												{
													"key": "page",
													"value": "1",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request.  Default is 25 (standard pagination)"
												}
											]
										},
										"description": "Obtain the invoices for all accounts"
									},
									"response": []
								},
								{
									"name": "Get Invoices For Specific Accounts v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"        // Schema payload check\r",
													"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyInvoiceListResponse\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
													"        });    \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var moment = require('moment');\r",
													"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";\r",
													"var fapiDate = moment().format(dateFormat);\r",
													"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"accountIds\": [\n            \"{{accountId}}\"\n        ]\n    },\n    \"meta\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{primaryDataHolderUrl}}/energy/accounts/invoices?newest-date={{timeCurrent}}&oldest-date={{dateLastYear}}&page=1&page-size={{pageSize}}",
											"host": [
												"{{primaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"accounts",
												"invoices"
											],
											"query": [
												{
													"key": "newest-date",
													"value": "{{timeCurrent}}",
													"description": "Constrain the request to records with effective date at or before this date.  If absent defaults to current date.  Format is aligned to DateString common type"
												},
												{
													"key": "oldest-date",
													"value": "{{dateLastYear}}",
													"description": "Constrain the request to records with effective date at or after this date. If absent defaults to newest-date minus 24 months days.  Format is aligned to DateString common type"
												},
												{
													"key": "page",
													"value": "1",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request.  Default is 25 (standard pagination)"
												}
											]
										},
										"description": "Obtain invoices for a specified set of accounts"
									},
									"response": []
								}
							]
						},
						{
							"name": "billing",
							"item": [
								{
									"name": "Get Bulk Billing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"\r",
													"\r",
													"        // Schema payload check\r",
													"        pm.test('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyBillingListResponseV2\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid).to.be.true; \r",
													"        });    \r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "3",
												"description": "(Required) Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{primaryDataHolderUrl}}/energy/accounts/billing?newest-time={{timeCurrent}}&oldest-time={{dateLastYear}}&page=1&page-size={{pageSize}}",
											"host": [
												"{{primaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"accounts",
												"billing"
											],
											"query": [
												{
													"key": "newest-time",
													"value": "{{timeCurrent}}",
													"description": "Constrain the request to records with effective time at or before this date/time.  If absent defaults to current date/time.  Format is aligned to DateTimeString common type"
												},
												{
													"key": "oldest-time",
													"value": "{{dateLastYear}}",
													"description": "Constrain the request to records with effective time at or after this date/time. If absent defaults to newest-time minus 12 months.  Format is aligned to DateTimeString common type"
												},
												{
													"key": "page",
													"value": "1",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request.  Default is 25 (standard pagination)"
												}
											]
										},
										"description": "Obtain billing transactions for all accounts"
									},
									"response": []
								},
								{
									"name": "Get Billing For Specific Accounts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try {\r",
													"            jsonData = pm.response.json();\r",
													"\r",
													"            }\r",
													"        catch(e) {\r",
													"            console.log(e);\r",
													"        }\r",
													"        // Schema payload check\r",
													"        pm.test('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"EnergyBillingListResponseV2\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid).to.be.true; \r",
													"        });    \r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-v",
												"value": "3",
												"description": "(Required) Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "1",
												"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder must respond with a 406 Not Acceptable.",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{x-fapi-auth-date}}",
												"description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "{{x-fapi-customer-ip-address}}",
												"description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"accountIds\": [\n            \"{{accountId}}\"\n        ]\n    },\n    \"meta\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{primaryDataHolderUrl}}/energy/accounts/billing?newest-time={{timeCurrent}}&oldest-time={{dateLastYear}}&page=1&page-size={{pageSize}}",
											"host": [
												"{{primaryDataHolderUrl}}"
											],
											"path": [
												"energy",
												"accounts",
												"billing"
											],
											"query": [
												{
													"key": "newest-time",
													"value": "{{timeCurrent}}",
													"description": "Constrain the request to records with effective time at or before this date/time.  If absent defaults to current date/time.  Format is aligned to DateTimeString common type"
												},
												{
													"key": "oldest-time",
													"value": "{{dateLastYear}}",
													"description": "Constrain the request to records with effective time at or after this date/time. If absent defaults to newest-time minus 12 months.  Format is aligned to DateTimeString common type"
												},
												{
													"key": "page",
													"value": "1",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request.  Default is 25 (standard pagination)"
												}
											]
										},
										"description": "Obtain billing for a specified set of accounts"
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Accounts v1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"        // Parse the response body\r",
											"        var jsonData;\r",
											"        try {\r",
											"            jsonData = pm.response.json();\r",
											"\r",
											"            }\r",
											"        catch(e) {\r",
											"            console.log(e);\r",
											"        }\r",
											"\r",
											"\r",
											"        // Schema payload check\r",
											"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
											"            const valid = ajv.validate(\"EnergyAccountListResponse\", jsonData)\r",
											"            if (!valid){\r",
											"            ajv.errors.forEach(element => {\r",
											"                console.log(JSON.stringify(element));\r",
											"                });\r",
											"            };\r",
											"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
											"        });    \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";\r",
											"var fapiDate = moment().format(dateFormat);\r",
											"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"value": "1",
										"type": "text"
									},
									{
										"key": "x-min-v",
										"value": "1",
										"type": "text"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text"
									},
									{
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}",
										"type": "text"
									},
									{
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}",
										"type": "text"
									},
									{
										"key": "x-cds-client-headers",
										"value": "{{cdsClientHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{primaryDataHolderUrl}}/energy/accounts?page=1&page-size={{pageSize}}",
									"host": [
										"{{primaryDataHolderUrl}}"
									],
									"path": [
										"energy",
										"accounts"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Page of results to request (standard pagination)"
										},
										{
											"key": "page-size",
											"value": "{{pageSize}}",
											"description": "Page size to request.  Default is 25 (standard pagination)"
										}
									]
								},
								"description": "Obtain the list of energy accounts available under the authorised consent"
							},
							"response": []
						},
						{
							"name": "Get Accounts v2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"        // Parse the response body\r",
											"        var jsonData;\r",
											"        try {\r",
											"            jsonData = pm.response.json();\r",
											"\r",
											"            }\r",
											"        catch(e) {\r",
											"            console.log(e);\r",
											"        }\r",
											"\r",
											"\r",
											"\r",
											"        // Schema payload check\r",
											"         ((pm.response.code == 200) ? pm.test : pm.test.skip)('Response payload conforms to standards schema', function() {\r",
											"            const valid = ajv.validate(\"EnergyAccountListResponseV2\", jsonData)\r",
											"            if (!valid){\r",
											"            ajv.errors.forEach(element => {\r",
											"                console.log(JSON.stringify(element));\r",
											"                });\r",
											"            };\r",
											"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;\r",
											"        });    \r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";\r",
											"var fapiDate = moment().format(dateFormat);\r",
											"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"value": "2",
										"type": "text"
									},
									{
										"key": "x-min-v",
										"value": "2",
										"type": "text"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text"
									},
									{
										"key": "x-fapi-auth-date",
										"value": "{{x-fapi-auth-date}}",
										"type": "text"
									},
									{
										"key": "x-fapi-customer-ip-address",
										"value": "{{x-fapi-customer-ip-address}}",
										"type": "text"
									},
									{
										"key": "x-cds-client-headers",
										"value": "{{cdsClientHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{primaryDataHolderUrl}}/energy/accounts?page=1&page-size={{pageSize}}",
									"host": [
										"{{primaryDataHolderUrl}}"
									],
									"path": [
										"energy",
										"accounts"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Page of results to request (standard pagination)"
										},
										{
											"key": "page-size",
											"value": "{{pageSize}}",
											"description": "Page size to request.  Default is 25 (standard pagination)"
										}
									]
								},
								"description": "Obtain the list of energy accounts available under the authorised consent"
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var moment = require('moment');",
							"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";",
							"var fapiDate = moment().format(dateFormat);",
							"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var moment = require('moment');",
					"var dateFormat = \"ddd, DD MMM yyyy hh:mm:ss [GMT]\";",
					"var fapiDate = moment().format(dateFormat);",
					"pm.collectionVariables.set(\"x-fapi-auth-date\", fapiDate);",
					"if (pm.iterationData.get(\"unauthenticatedResourceUrl\") != undefined)",
					"    pm.collectionVariables.set(\"unauthenticatedResourceUrl\", pm.iterationData.get(\"unauthenticatedResourceUrl\"));",
					"if (pm.iterationData.get(\"primaryDataHolderUrl\") != undefined)",
					"    pm.collectionVariables.set(\"primaryDataHolderUrl\", pm.iterationData.get(\"primaryDataHolderUrl\"));",
					"if (pm.iterationData.get(\"secondaryDataHolderUrl\") != undefined)",
					"    pm.collectionVariables.set(\"secondaryDataHolderUrl\", pm.iterationData.get(\"secondaryDataHolderUrl\"));",
					"if (pm.iterationData.get(\"version\") != undefined)",
					"    pm.collectionVariables.set(\"version\", pm.iterationData.get(\"version\"));    ",
					"if (pm.iterationData.get(\"accessToken\") != undefined)",
					"    pm.collectionVariables.set(\"accessToken\", pm.iterationData.get(\"accessToken\"));",
					"if (pm.iterationData.get(\"cdsClientHeader\") != undefined)",
					"    pm.collectionVariables.set(\"cdsClientHeader\", pm.iterationData.get(\"cdsClientHeader\"));",
					"if (pm.iterationData.get(\"accountId\") != undefined)",
					"    pm.collectionVariables.set(\"accountId\", pm.iterationData.get(\"accountId\"));",
					"if (pm.iterationData.get(\"planId\") != undefined)",
					"    pm.collectionVariables.set(\"planId\", pm.iterationData.get(\"planId\")); ",
					"if (pm.iterationData.get(\"servicePointId\") != undefined)",
					"    pm.collectionVariables.set(\"servicePointId\", pm.iterationData.get(\"servicePointId\")); ",
					"if (pm.iterationData.get(\"pageSize\") != undefined)",
					"    pm.collectionVariables.set(\"pageSize\", pm.iterationData.get(\"pageSize\")); ",
					"if (pm.iterationData.get(\"userId\") != undefined)",
					"    pm.collectionVariables.set(\"userId\", pm.iterationData.get(\"userId\"));   ",
					"pm.request.headers.add(\"userId: \" + pm.environment.get(\"userId\"))    ",
					"",
					"// Initialise only once",
					"if (pm.variables.get(\"intitalised\") == 0 || pm.variables.get(\"intitalised\") == null) {",
					"let Ajv = require('ajv');",
					"ajv = new Ajv({logger: console});",
					"    pm.variables.set(\"intitalised\",1);",
					"    // Set some time relevant time stamps",
					"    console.log(\"Pre-request: Setting common variables\")",
					"    var timeCurrent = new Date();",
					"    var timeTenMinutesAgo = new Date(timeCurrent.getFullYear(),",
					"                                    timeCurrent.getMonth(),",
					"                                    timeCurrent.getDate(),",
					"                                    timeCurrent.getHours(),",
					"                                    timeCurrent.getMinutes()-10,",
					"                                    timeCurrent.getSeconds());",
					"    var dateToday = new Date(timeCurrent.getFullYear(),",
					"                            timeCurrent.getMonth(),",
					"                            timeCurrent.getDate(), 0, 0, 0);",
					"    var dateYesterday = new Date(timeCurrent.getFullYear(),",
					"                                timeCurrent.getMonth(),",
					"                                timeCurrent.getDate() - 1, 0, 0, 0);",
					"    var dateTomorrow = new Date(timeCurrent.getFullYear(),",
					"                                timeCurrent.getMonth(),",
					"                                timeCurrent.getDate() + 1, 0, 0, 0);",
					"    var dateLastYear = new Date(timeCurrent.getFullYear() - 1,",
					"                                timeCurrent.getMonth(),",
					"                                timeCurrent.getDate(), 0, 0, 0);",
					"",
					"    // setting the base url for schema files",
					"    var version = pm.collectionVariables.get(\"version\");",
					"",
					"",
					"// Set some time relevant time stamps",
					"var timeCurrent = new Date();",
					"var moment = require(\"moment\")",
					"",
					"    // newest time defaults to today",
					"    if (pm.iterationData.get(\"dateLastYear\") != undefined)",
					"        pm.variables.set(\"dateLastYear\", pm.iterationData.get(\"dateLastYear\"));",
					"    else",
					"        pm.variables.set(\"dateLastYear\", dateLastYear);",
					"",
					"        // newest time defaults to today",
					"    if (pm.iterationData.get(\"timeCurrent\") != undefined)",
					"        pm.variables.set(\"timeCurrent\", pm.iterationData.get(\"timeCurrent\"));",
					"    else",
					"        pm.variables.set(\"timeCurrent\", timeCurrent);    ",
					"",
					"",
					"    // setting the base url for schema files",
					"    var branch = \"main/\"; ",
					"",
					"    var schemaBaseUrl = \"https://raw.githubusercontent.com/ConsumerDataStandardsAustralia/dsb-schema-tools/\" + branch;",
					"    //var schemaBaseUrl = \"http://localhost:8083/\";",
					"    //var schemaBaseUrl = \"https://raw.githubusercontent.com/ConsumerDataStandardsAustralia/dsb-schema-tools/1.28.0/\";",
					"",
					"",
					"    var urlEnergySchemaValidationFileDirectory = schemaBaseUrl + version + \"/postman/postman-validation-energy-\" + version + \".json\";",
					"",
					"    pm.sendRequest(urlEnergySchemaValidationFileDirectory, (error, responseEnergy) => {",
					"        console.log(\"Reading schema files for energy....\"); ",
					"        if (error) {",
					"            console.log('Getting schema returned: ' + error);",
					"        } else {",
					"            ",
					"            try { ",
					"                let energySchemaCount = 0;",
					"                let energySchemaAdded = 0;",
					"                console.log(\"RESPONSE: \" + responseEnergy.json());",
					"                let schemaEnergy = responseEnergy.json();",
					"                for (var key in schemaEnergy) {",
					"                    energySchemaCount++;",
					"                    if (schemaEnergy.hasOwnProperty(key)) {",
					"                        schemaEnergy[key].$id = key;",
					"                        try {",
					"                            ajv.addSchema(schemaEnergy[key]);",
					"                            energySchemaAdded++;",
					"                        }",
					"                        catch(ex){",
					"                            console.log(\"Exception in \" + key + \" : \" + JSON.stringify(ex));",
					"                        }",
					"                        ",
					"                    }",
					"                }",
					"                console.log(\"Energy schema contains \" + energySchemaCount + \" entries\") ;",
					"                console.log(\"Added \" + energySchemaAdded + \" schemas from Energy\"); ;  ",
					"            } catch(e) {",
					"                console.log(\"Exception :\" + JSON.stringify(e));",
					"            }",
					"                  ",
					"        }",
					"    }); ",
					"  }",
					"",
					"",
					"pm.collectionVariables.set(\"notPaginatedRequests\", ",
					"    [",
					"        \"Get Generic Plan Detail v1\",",
					"        \"Get Generic Plan Detail v2\", ",
					"        \"Get Generic Plan Detail v3\",",
					"        \"T.EAR.0075 Get Service Point Detail v1\",",
					"        \"T.EAR.033 Get DER For Service Point v1\",",
					"        \"Get Account Detail v1\",",
					"        \"Get Account Detail v2\",",
					"        \"Get Account Detail v3\",",
					"        \"Get Account Detail v4\",",
					"        \"Get Agreed Payment Schedule v1\",",
					"        \"Get Concessions v1\",",
					"        \"Get Billing For Account v1\",",
					"        \"Get Balance For Account v1\"",
					"    ]);",
					"",
					"// This is used for pagination to determine if this is the first page, last page, middle page or",
					"// a single page response",
					"utils = {",
					"    whichPage: function (currPage, totalPages, totalRecords, pageSize ) {",
					"        if (pageSize == null) {pageSize = 25};",
					"        ",
					"        if (currPage == null) {currPage = 1};",
					"",
					"        if (totalPages <= 1 ) return 0;",
					"",
					"        if (totalRecords <= pageSize || (totalRecords > pageSize &&  currPage == 1)) return 1;   ",
					"",
					"        if (currPage > 1 && currPage < totalPages ){ return 2}",
					"",
					"        if (currPage == totalPages ){ return 3}",
					"    },",
					"",
					"};",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"        // Parse the response body",
					"        var jsonData;",
					"        try { jsonData = pm.response.json(); } catch(e) {}",
					"",
					"        var invalidQueryParameters = false;",
					"        var invalidXvHeaderParameters = false;",
					"        var missingHeaderParameters = false;",
					"        var pageSizeTooLarge = false;",
					"        var oldestTime;",
					"        var newestTime;",
					"        var minAmount;",
					"        var maxAmount;",
					"        var isOwned;",
					"        var fuelType;",
					"        var planType;",
					"        var requestMinVersionNumber;",
					"        var requestVersionNumber;",
					"        var pageSize;",
					"",
					"        pm.collectionVariables.set(\"badRequest\", false);",
					"",
					"        updateSince = pm.request.url.query.get(\"updated-since\")",
					"        newestTime = pm.request.url.query.get(\"newest-time\")",
					"        oldestTime = pm.request.url.query.get(\"oldest-time\")",
					"        newestDate = pm.request.url.query.get(\"newest-date\")",
					"        oldestDate = pm.request.url.query.get(\"oldest-date\")",
					"        fuelType = pm.request.url.query.get(\"fuelType\") ",
					"        planType = pm.request.url.query.get(\"type\")",
					"        effectiveType = pm.request.url.query.get(\"effective\")",
					"",
					"        var requestVersion = pm.request.headers.get(\"x-v\");",
					"        if (requestVersion != undefined)",
					"            requestVersionNumber = Number(pm.request.headers.get(\"x-v\"));",
					"        else {",
					"            /// x-v is a required header",
					"            missingHeaderParameters = true;",
					"        }",
					"",
					"        var requestMinVersion = pm.request.headers.get(\"x-min-v\");",
					"        // x-min-v is not a mandatory header",
					"        if (requestMinVersion != undefined) {",
					"            requestMinVersionNumber = Number(pm.request.headers.get(\"x-min-v\"));",
					"        }",
					"        ",
					"        // if we have an invalid x-v or x-min-v value",
					"        if ((requestVersionNumber != undefined && (!(Number.isSafeInteger(requestVersionNumber) && requestVersionNumber > 0)))",
					"            || (requestMinVersion != undefined && ( !(Number.isSafeInteger(requestMinVersionNumber) && requestMinVersionNumber > 0)",
					"        )))",
					"            invalidXvHeaderParameters = !(Number.isSafeInteger(requestVersionNumber) && requestVersionNumber > 0);",
					"",
					"        // check if the dates are valid",
					"        xv = pm.request.headers.get(\"x-v\"); ",
					"        xvmin = pm.request.headers.get(\"x-v\"); ",
					"",
					"",
					"        var validProductFuelTypes = [\"ELECTRICITY\", \"GAS\", \"DUAL\", \"ALL\"]",
					"",
					"        var validPlanTypes = [\"ALL\", \"STANDING\", \"MARKET\", \"REGULATED\"]",
					"",
					"        var validEffectiveTypes = [\"ALL\", \"CURRENT\", \"FUTURE\"]",
					"",
					"",
					"        // test if this request should have returned an error base on query parameters ",
					"        // validate the updated-since against RFC3339",
					"        if ((pm.request.url.query.get(\"updated-since\") != undefined ",
					"            && (updateSince.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:.\\+)?[A-Z]?(?:[+.-](?:\\d{2,5}:\\d{2,5}|\\d{2,5}[A-Z,+]))(?:\\d{2}?:?\\d{2})?$/) == null))) {",
					"            console.log(\"Request should return error based on updated-since qry parameters\")",
					"            invalidQueryParameters = true;",
					"            // check thatwe get a 400 error",
					"            pm.test(\"Should get a 400 based on invalid updated-since parameters: \" + pm.request.url.query.get(\"updated-since\"), function () {",
					"                pm.response.to.have.status(400);",
					"            });",
					"        } ",
					"",
					"        // validate the newest-time against RFC3339",
					"        if ((pm.request.url.query.get(\"oldest-time\") != undefined ",
					"            && (oldestTime.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:.\\+)?[A-Z]?(?:[+.-](?:\\d{2,5}:\\d{2,5}|\\d{2,5}[A-Z,+]))(?:\\d{2}?:?\\d{2})?$/) == null))) {",
					"            console.log(\"Request should return error based on oldest qry parameters\")",
					"            invalidQueryParameters = true;",
					"            // check thatwe get a 400 error",
					"            pm.test(\"Should get a 400 based on invalid oldest parameters: \" + pm.request.url.query.get(\"oldest-time\"), function () {",
					"                pm.response.to.have.status(400);",
					"            });",
					"        }               ",
					"        // validate the newest-time against RFC3339",
					"        if ((pm.request.url.query.get(\"newest-time\") != undefined ",
					"            && (newestTime.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:.\\+)?[A-Z]?(?:[+.-](?:\\d{2,5}:\\d{2,5}|\\d{2,5}[A-Z,+]))(?:\\d{2}?:?\\d{2})?$/) == null))) {",
					"            console.log(\"Request should return error based on newest-time qry parameters\")",
					"            invalidQueryParameters = true;",
					"            // check thatwe get a 400 error",
					"            pm.test(\"Should get a 400 based on invalid newest-time parameters: \" + pm.request.url.query.get(\"newest-time\"), function () {",
					"                pm.response.to.have.status(400);",
					"            });",
					"        }",
					"                // validate the newest-time against RFC3339",
					"        if ((pm.request.url.query.get(\"oldest-date\") != undefined ",
					"            && (oldestDate.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:.\\+)?[A-Z]?(?:[+.-](?:\\d{2,5}:\\d{2,5}|\\d{2,5}[A-Z,+]))(?:\\d{2}?:?\\d{2})?$/) == null))) {",
					"            console.log(\"Request should return error based on oldest-date qry parameter\")",
					"            invalidQueryParameters = true;",
					"            // check thatwe get a 400 error",
					"            pm.test(\"Should get a 400 based on invalid oldest-date parameter: \" + pm.request.url.query.get(\"oldest-date\"), function () {",
					"                pm.response.to.have.status(400);",
					"            });",
					"        }               ",
					"        // validate the newest-time against RFC3339",
					"        if ((pm.request.url.query.get(\"newest-date\") != undefined ",
					"            && (newestDate.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:.\\+)?[A-Z]?(?:[+.-](?:\\d{2,5}:\\d{2,5}|\\d{2,5}[A-Z,+]))(?:\\d{2}?:?\\d{2})?$/) == null))) {",
					"            console.log(\"Request should return error based on newest-date qry parameters\")",
					"            invalidQueryParameters = true;",
					"            // check thatwe get a 400 error",
					"            pm.test(\"Should get a 400 based on invalid newest-date parameters: \" + pm.request.url.query.get(\"newest-date\"), function () {",
					"                pm.response.to.have.status(400);",
					"            });",
					"        }",
					"",
					"        if ((pm.request.url.query.get(\"fuelType\") != undefined && validProductFuelTypes.indexOf(fuelType)< 0)) {",
					"            console.log(\"Request should return error based on invalid fuelType parameter\")",
					"            invalidQueryParameters = true;",
					"            // check thatwe get a 400 error",
					"            pm.test(\"Should get a 400 based on invalid fuelType parameter: \" + fuelType, function () {",
					"                pm.response.to.have.status(400);",
					"            });",
					"        }  ",
					"",
					"        if ((pm.request.url.query.get(\"type\") != undefined && validPlanTypes.indexOf(planType)< 0)) {",
					"            console.log(\"Request should return error based on invalid type parameter\")",
					"            invalidQueryParameters = true;",
					"            // check thatwe get a 400 error",
					"            pm.test(\"Should get a 400 based on invalid type parameter: \" + planType, function () {",
					"                pm.response.to.have.status(400);",
					"            });",
					"        } ",
					"",
					"        if ((pm.request.url.query.get(\"effective\") != undefined && validEffectiveTypes.indexOf(effectiveType)< 0)) {",
					"            console.log(\"Request should return error based on effective type parameter\")",
					"            invalidQueryParameters = true;",
					"            // check thatwe get a 400 error",
					"            pm.test(\"Should get a 400 based on invalid effective parameter: \" + effectiveType, function () {",
					"                pm.response.to.have.status(400);",
					"            });",
					"        }",
					"",
					"        if (pm.request.url.query.get(\"page-size\") != undefined)  {",
					"            pageSizeNumber = Number(pm.request.url.query.get(\"page-size\"));",
					"            if (!(Number.isSafeInteger(pageSizeNumber) && pageSizeNumber > 0)) {",
					"                // the page-size parameter is not a positive number",
					"                console.log(\"Request should return error based on page-size parameters \")",
					"                invalidQueryParameters = true;",
					"                // check thatwe get a 400 error",
					"                pm.test(\"Should get a 400 based on invalid page-size parameters\", function () {",
					"                    pm.response.to.have.status(400);",
					"                });",
					"            } else {",
					"                if (pageSizeNumber > 1000) {",
					"                  console.log(\"Page size is too large\")",
					"                    pageSizeTooLarge = true;                 ",
					"                }",
					"            }",
					"",
					"        }",
					"",
					"        // capture the case where a 400 should be returned for query parameter errors",
					"        if (invalidQueryParameters == true) {",
					"            // now test for error message",
					"            pm.test(\"Invalid query parameter returns 'urn:au-cds:error:cds-all:Field/Invalid' error\", function () {",
					"                var allErrors = jsonData.errors;",
					"                pm.expect(allErrors.find(err => (err.code == \"urn:au-cds:error:cds-all:Field/Invalid\" && err.title == \"Invalid Field\"))).to.not.be.undefined",
					"",
					"            });",
					"        }",
					"        // capture the case where a 400 should be returned for header parameter errors",
					"        if (invalidXvHeaderParameters == true) {",
					"            pm.test(\"Should get a 400 based on invalid header parameter\", function () {",
					"                pm.response.to.have.status(400);",
					"            });",
					"            // now test for error message",
					"            pm.test(\"Invalid header returns 'urn:au-cds:error:cds-all:Header/InvalidVersion' error code and 'Invalid Version' title\", function () {",
					"                var allErrors = jsonData.errors;",
					"                pm.expect(allErrors.find(err => (err.code == \"urn:au-cds:error:cds-all:Header/InvalidVersion\" && err.title == \"Invalid Version\"))).to.not.be.undefined",
					"",
					"            });",
					"        }",
					"",
					"        // capture the case where a 400 should be returned for header parameter errors",
					"        if (missingHeaderParameters == true) {",
					"            pm.test(\"Should get a 400 based on missing header parameter\", function () {",
					"                pm.response.to.have.status(400);",
					"            });",
					"            // now test for error message",
					"            pm.test(\"Missing header returns 'urn:au-cds:error:cds-all:Header/Missing' error code and 'Missing Required Header' title\", function () {",
					"                var allErrors = jsonData.errors;",
					"                pm.expect(allErrors.find(err => (err.code == \"urn:au-cds:error:cds-all:Header/Missing\" && err.title == \"Missing Required Header\"))).to.not.be.undefined",
					"",
					"            });",
					"        }",
					"",
					"        // capture the case where a 400 should be returned for header parameter errors",
					"        if (pageSizeTooLarge == true) {",
					"            pm.test(\"Should get a 400 based on page-size tool large\", function () {",
					"                pm.response.to.have.status(400);",
					"            });",
					"            // now test for error message",
					"            pm.test(\"Too large page-size 'urn:au-cds:error:cds-all:Field/InvalidPageSize' error code and 'Invalid Page Size' title\", function () {",
					"                var allErrors = jsonData.errors;",
					"                pm.expect(allErrors.find(err => (err.code == \"urn:au-cds:error:cds-all:Field/InvalidPageSize\" && err.title == \"Invalid Page Size\"))).to.not.be.undefined",
					"",
					"            });",
					"        }",
					"",
					"        // HTTP Response and headers, test content-type header of all non 500 returns",
					"        ((pm.response.code == 200 || pm.response.code == 400 || pm.response.code == 422 || pm.response.code == 406 || pm.response.code == 404) ? pm.test : pm.test.skip)(\"Content-Type header specifies json\", function () {",
					"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
					"        });",
					"",
					"        // 400 error are based on request data ONLY",
					"        ((invalidQueryParameters == false && invalidXvHeaderParameters == false && missingHeaderParameters == false && pageSizeTooLarge == false) ? pm.test : pm.test.skip)('Request is valid. This should not return a 400', function() {",
					"                pm.response.to.not.have.status(400);",
					"        });  ",
					"",
					"        // if this returns a specified error, and in cases where 400 the error should occur, then validate the error object",
					"        (((pm.response.code == 400 && (invalidQueryParameters == true || invalidXvHeaderParameters == true || missingHeaderParameters == true || pageSizeTooLarge == true)) || pm.response.code == 422 || pm.response.code == 406 || pm.response.code == 404 ) ? pm.test : pm.test.skip)('Error payload conforms to standards schema', function() {",
					"                const valid = ajv.validate(\"ResponseErrorListV2\", jsonData);",
					"                if (!valid){",
					"                ajv.errors.forEach(element => {",
					"                    console.log(JSON.stringify(element));",
					"                    });",
					"                };",
					"                pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true;         ",
					"        });  ",
					"        ",
					"        // only do these tests if we get a 200 and we SHOULD get a 200",
					"        if ((invalidQueryParameters == false && invalidXvHeaderParameters == false && missingHeaderParameters == false && pageSizeTooLarge == false) && pm.response.code == 200){",
					"",
					"            pm.test(\"x-v header is present and has correct value\", function () {",
					"                    var responseVersion = pm.request.headers.get(\"x-v\");",
					"                    var responseVersionNumber = Number(pm.response.headers.get(\"x-v\"));",
					"                    var responseXvIsPositiveInteger = Number.isSafeInteger(responseVersionNumber) && responseVersionNumber > 0;",
					"                    pm.expect(responseVersion).not.null;",
					"                    pm.expect(responseXvIsPositiveInteger).to.be.true;",
					"            });",
					"",
					"            var paginatedRequests = pm.collectionVariables.get(\"notPaginatedRequests\");",
					"            var isPaginated = paginatedRequests.find(x => x == pm.info.requestName) == undefined;",
					"            // Pagination tests",
					"            if (isPaginated == true) {",
					"                ((pm.response.code == 200) ? pm.test : pm.test.skip)(\"Pagination fields in meta data are present\", function () {",
					"                    pm.expect(jsonData.meta.totalPages >= 0);",
					"                    pm.expect(jsonData.meta.totalRecords >= 0);",
					"                });",
					"                var currentPage = pm.variables.get(\"currentPage\");",
					"                var currentPageSize = pm.variables.get(\"pageSize\");",
					"                var currentTotalPages = jsonData?.meta?.totalPages;",
					"                var currentTotalRecords = jsonData?.meta?.totalRecords;",
					"",
					"                 ((pm.response.code == 200) ? pm.test : pm.test.skip)(\"Pagination fields have required properties\", function () {",
					"                    pm.expect(jsonData.links).to.have.property(\"self\");            ",
					"                    if (currentPage > 1 && currentTotalPages > 1) pm.expect(jsonData.links).to.have.property(\"prev\");",
					"                    if (currentPage > 1 && currentTotalPages > 1) pm.expect(jsonData.links).to.have.property(\"first\");",
					"                    if (currentPage < currentTotalPages) {pm.expect(jsonData.links).to.have.property(\"next\");}  ",
					"                    if (currentPage < currentTotalPages) {pm.expect(jsonData.links).to.have.property(\"last\");} ",
					"                });",
					"            }",
					"",
					"        }",
					"",
					"        if (invalidQueryParameters == true || invalidXvHeaderParameters == true || missingHeaderParameters == true || pageSizeTooLarge == true || pm.response.code > 499) {",
					"            pm.collectionVariables.set(\"badRequest\", true);",
					"        }",
					"",
					"",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "version",
			"value": "1.31.0"
		},
		{
			"key": "pageSize",
			"value": "2"
		},
		{
			"key": "x-fapi-auth-date",
			"value": ""
		},
		{
			"key": "notPaginatedRequests",
			"value": ""
		},
		{
			"key": "badRequest",
			"value": ""
		},
		{
			"key": "dateLastYear",
			"value": ""
		}
	]
}